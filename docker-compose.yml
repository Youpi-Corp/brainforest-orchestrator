services:
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/sites-enabled:/etc/nginx/sites-enabled:ro
      - ./ssl/certbot/conf:/etc/letsencrypt:ro
      - ./ssl/certbot/www:/var/www/certbot:ro
    depends_on:
      - frontend
      - backend
    networks:
      - brainforest-network
    restart: unless-stopped

  frontend:
    build:
      context: ./leaves
      dockerfile: Dockerfile
    expose:
      - "80"
    depends_on:
      - backend
    networks:
      - brainforest-network
    restart: unless-stopped

  backend:
    build:
      context: ./sap
      dockerfile: Dockerfile
    expose:
      - "8080"
    environment:
      - DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD}@db:5432/brainforest
      - NODE_ENV=production
    depends_on:
      - db
    networks:
      - brainforest-network
    restart: unless-stopped

  certbot:
    image: certbot/certbot
    volumes:
      - ./ssl/certbot/conf:/etc/letsencrypt
      - ./ssl/certbot/www:/var/www/certbot
    environment:
      - EMAIL=${SSL_EMAIL}
      - DOMAIN_NAME=${DOMAIN_NAME}
    entrypoint: /bin/sh
    command: -c "
      echo 'Waiting for nginx...' &&
      sleep 30 &&
      if [ ! -f /etc/letsencrypt/live/$${DOMAIN_NAME}/fullchain.pem ]; then
      echo 'Obtaining initial certificates...' &&
      certbot certonly --webroot -w /var/www/certbot --email $${EMAIL} --agree-tos --no-eff-email -d $${DOMAIN_NAME} -d www.$${DOMAIN_NAME} --verbose;
      fi &&
      while :; do
      certbot renew --webroot -w /var/www/certbot --quiet;
      sleep 12h;
      done
      "
    restart: unless-stopped

  db:
    image: postgres:16-alpine
    environment:
      - POSTGRES_DB=brainforest
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backups:/backups
    networks:
      - brainforest-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d brainforest"]
      interval: 30s
      timeout: 10s
      retries: 3

networks:
  brainforest-network:
    driver: bridge

volumes:
  postgres_data:
